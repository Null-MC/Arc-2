#version 430 core

#include "/lib/constants.glsl"
#include "/settings.glsl"

layout (vertices=3) out;

in VertexData2 {
    vec2 uv;
    vec2 light;
    vec4 color;
    vec3 localPos;
    vec3 localOffset;
    vec3 localNormal;
    vec4 localTangent;

    #ifdef RENDER_ENTITY
        vec4 overlayColor;
    #endif

    #ifdef RENDER_TERRAIN
        flat uint blockId;
    #endif

    #if defined(RENDER_TERRAIN) && defined(RENDER_TRANSLUCENT)
        float waveStrength;
    #endif

    #if defined(RENDER_PARALLAX) && defined(RENDER_TERRAIN)
        vec3 tangentViewPos;
    #endif

    #if defined(RENDER_PARALLAX) || defined(MATERIAL_NORMAL_SMOOTH) || defined(MATERIAL_ENTITY_TESSELLATION)
        flat vec2 atlasCoordMin;
        flat vec2 atlasCoordSize;
    #endif
} vIn[];

out VertexData2 {
    vec2 uv;
    vec2 light;
    vec4 color;
    vec3 localPos;
    vec3 localOffset;
    vec3 localNormal;
    vec4 localTangent;

    #ifdef RENDER_ENTITY
        vec4 overlayColor;
    #endif

    #ifdef RENDER_TERRAIN
        flat uint blockId;
    #endif

    #if defined(RENDER_TERRAIN) && defined(RENDER_TRANSLUCENT)
        vec3 surfacePos;
        float waveStrength;
    #endif

    #if defined(RENDER_PARALLAX) && defined(RENDER_TERRAIN)
        vec3 tangentViewPos;
    #endif

    #if defined(RENDER_PARALLAX) || defined(MATERIAL_NORMAL_SMOOTH) || defined(MATERIAL_ENTITY_TESSELLATION)
        flat vec2 atlasCoordMin;
        flat vec2 atlasCoordSize;
    #endif
} vOut[];

#include "/lib/common.glsl"

#include "/lib/utility/tessellation_control.glsl"


const float MIN_DISTANCE = 4;
const float MAX_DISTANCE = 20;


void main() {
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;

    vOut[gl_InvocationID].uv = vIn[gl_InvocationID].uv;
    vOut[gl_InvocationID].light = vIn[gl_InvocationID].light;
    vOut[gl_InvocationID].color = vIn[gl_InvocationID].color;
    vOut[gl_InvocationID].localPos = vIn[gl_InvocationID].localPos;
    vOut[gl_InvocationID].localOffset = vIn[gl_InvocationID].localOffset;
    vOut[gl_InvocationID].localNormal = vIn[gl_InvocationID].localNormal;
    vOut[gl_InvocationID].localTangent = vIn[gl_InvocationID].localTangent;

    #ifdef RENDER_ENTITY
        vOut[gl_InvocationID].overlayColor = vIn[gl_InvocationID].overlayColor;
    #endif

    #ifdef RENDER_TERRAIN
        vOut[gl_InvocationID].blockId = vIn[gl_InvocationID].blockId;
    #endif

    #if defined(RENDER_TERRAIN) && defined(RENDER_TRANSLUCENT)
        vOut[gl_InvocationID].surfacePos = vIn[gl_InvocationID].localPos;
        vOut[gl_InvocationID].waveStrength = vIn[gl_InvocationID].waveStrength;
    #endif

    #if defined(RENDER_PARALLAX) && defined(RENDER_TERRAIN)
        vOut[gl_InvocationID].tangentViewPos = vIn[gl_InvocationID].tangentViewPos;
    #endif

    #if defined(RENDER_PARALLAX) || defined(MATERIAL_NORMAL_SMOOTH) || defined(MATERIAL_ENTITY_TESSELLATION)
        vOut[gl_InvocationID].atlasCoordMin = vIn[gl_InvocationID].atlasCoordMin;
        vOut[gl_InvocationID].atlasCoordSize = vIn[gl_InvocationID].atlasCoordSize;
    #endif

    if (gl_InvocationID == 0) {
        float maxQuality = 1.0;

        #ifdef RENDER_TERRAIN
            bool is_fluid = iris_hasFluid(vIn[gl_InvocationID].blockId);
            if (is_fluid) maxQuality = Water_TessellationLevel;
        #elif defined(RENDER_ENTITY)
            maxQuality = 24;
        #endif

        vec3 viewZ = vec3(
            length(vIn[0].localPos),
            length(vIn[1].localPos),
            length(vIn[2].localPos));

        vec3 distances = GetPatchDistances(MIN_DISTANCE, MAX_DISTANCE, viewZ);
        ApplyPatchControl(distances, maxQuality);
    }
}
