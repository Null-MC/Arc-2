#version 430 core

#include "/lib/constants.glsl"
#include "/settings.glsl"

layout (vertices=3) out;

in VertexData2 {
    vec2 uv;
    vec2 light;
    vec4 color;
    vec3 localPos;
    vec3 localOffset;
    vec3 localNormal;
    vec4 localTangent;
    flat uint blockId;

    float waveStrength;

	#ifdef RENDER_PARALLAX
		vec3 tangentViewPos;
		flat vec2 atlasMinCoord;
		flat vec2 atlasMaxCoord;
	#endif
} vIn[];

out VertexData2 {
    vec2 uv;
    vec2 light;
    vec4 color;
    vec3 localPos;
    vec3 localOffset;
    vec3 localNormal;
    vec4 localTangent;
    flat uint blockId;

    vec3 surfacePos;
    float waveStrength;

	#ifdef RENDER_PARALLAX
		vec3 tangentViewPos;
		flat vec2 atlasMinCoord;
		flat vec2 atlasMaxCoord;
	#endif
} vOut[];

#include "/lib/common.glsl"

#include "/lib/utility/tessellation_control.glsl"


const float MIN_DISTANCE = 4;
const float MAX_DISTANCE = 40;


void main() {
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;

    vOut[gl_InvocationID].uv = vIn[gl_InvocationID].uv;
    vOut[gl_InvocationID].light = vIn[gl_InvocationID].light;
    vOut[gl_InvocationID].color = vIn[gl_InvocationID].color;
    vOut[gl_InvocationID].localPos = vIn[gl_InvocationID].localPos;
    vOut[gl_InvocationID].localOffset = vIn[gl_InvocationID].localOffset;
    vOut[gl_InvocationID].localNormal = vIn[gl_InvocationID].localNormal;
    vOut[gl_InvocationID].localTangent = vIn[gl_InvocationID].localTangent;

    vOut[gl_InvocationID].blockId = vIn[gl_InvocationID].blockId;

    vOut[gl_InvocationID].surfacePos = vIn[gl_InvocationID].localPos;
    vOut[gl_InvocationID].waveStrength = vIn[gl_InvocationID].waveStrength;

    #ifdef RENDER_PARALLAX
        vOut[gl_InvocationID].tangentViewPos = vIn[gl_InvocationID].tangentViewPos;
        vOut[gl_InvocationID].atlasMinCoord = vIn[gl_InvocationID].atlasMinCoord;
        vOut[gl_InvocationID].atlasMaxCoord = vIn[gl_InvocationID].atlasMaxCoord;
    #endif

    if (gl_InvocationID == 0) {
        // bool isWater = bitfieldExtract(vIn[gl_InvocationID].material, 6, 1) != 0;
        bool is_fluid = iris_hasFluid(vIn[gl_InvocationID].blockId);

        float maxQuality = is_fluid ? WATER_TESSELLATION_LEVEL : 1.0;

        vec3 distances = GetPatchDistances(MIN_DISTANCE, MAX_DISTANCE);
        ApplyPatchControl(distances, maxQuality);
    }
}
