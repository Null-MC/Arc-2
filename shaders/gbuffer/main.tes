#version 430 core

layout (triangles, fractional_even_spacing, ccw) in;

#include "/lib/constants.glsl"
#include "/lib/common.glsl"

in VertexData2 {
    vec2 uv;
    vec2 light;
    vec4 color;
    vec3 localPos;
    vec3 localOffset;
    vec3 localNormal;
    vec4 localTangent;
    flat int material;

    vec3 surfacePos;
} vIn[];

out VertexData2 {
    vec2 uv;
    vec2 light;
    vec4 color;
    vec3 localPos;
    vec3 localOffset;
    vec3 localNormal;
    vec4 localTangent;
    flat int material;

    vec3 surfacePos;
} vOut;

#include "/lib/water_waves.glsl"

#include "/lib/utility/tessellation_eval.glsl"

#ifdef EFFECT_TAA_ENABLED
    #include "/lib/taa_jitter.glsl"
#endif


void main() {
    gl_Position = _interpolate(gl_in[0].gl_Position, gl_in[1].gl_Position, gl_in[2].gl_Position);

    vOut.uv = _interpolate(vIn[0].uv, vIn[1].uv, vIn[2].uv);
    vOut.light = _interpolate(vIn[0].light, vIn[1].light, vIn[2].light);
    vOut.color = _interpolate(vIn[0].color, vIn[1].color, vIn[2].color);
    vOut.localPos = _interpolate(vIn[0].localPos, vIn[1].localPos, vIn[2].localPos);
    vOut.localOffset = _interpolate(vIn[0].localOffset, vIn[1].localOffset, vIn[2].localOffset);
    vOut.localNormal = _interpolate(vIn[0].localNormal, vIn[1].localNormal, vIn[2].localNormal);
    vOut.localTangent = _interpolate(vIn[0].localTangent, vIn[1].localTangent, vIn[2].localTangent);
    vOut.surfacePos = _interpolate(vIn[0].surfacePos, vIn[1].surfacePos, vIn[2].surfacePos);

    vOut.material = vIn[0].material;

    bool isWater = bitfieldExtract(vIn[0].material, 6, 1) != 0;

    if (isWater) {
        float distF = 1.0 - smoothstep(0.2, 2.8, length(vOut.surfacePos));
        distF = 1.0 - (distF*distF);
        
        vec3 waveOffset = GetWaveHeight(cameraPos + vOut.localPos, vOut.light.y, timeCounter, WaterWaveOctaveMin);
        vOut.localPos.y += distF * waveOffset.y;

        vec3 viewPos = mul3(playerModelView, vOut.localPos);
        gl_Position = playerProjection * vec4(viewPos, 1.0);

        #ifdef EFFECT_TAA_ENABLED
            jitter(gl_Position);
        #endif
    }
}
