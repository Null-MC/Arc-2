#version 430 core

#include "/lib/constants.glsl"
#include "/settings.glsl"

layout (triangles, fractional_even_spacing, ccw) in;

#include "/lib/common.glsl"

in VertexData2 {
    vec2 uv;
    vec2 light;
    vec4 color;
    vec3 localPos;
    vec3 localOffset;
    vec3 localNormal;
    vec4 localTangent;

    #ifdef RENDER_ENTITY
        vec4 overlayColor;
    #endif

    #ifdef RENDER_TERRAIN
        flat uint blockId;
    #endif

    #if defined(RENDER_TERRAIN) && defined(RENDER_TRANSLUCENT)
        vec3 surfacePos;
        float waveStrength;
    #endif

    #if defined(RENDER_PARALLAX) && defined(RENDER_TERRAIN)
        vec3 tangentViewPos;
    #endif

    #if defined(RENDER_PARALLAX) || defined(MATERIAL_NORMAL_SMOOTH) || defined(MATERIAL_ENTITY_TESSELLATION)
        flat vec2 atlasCoordMin;
        flat vec2 atlasCoordSize;
    #endif
} vIn[];

out VertexData2 {
    vec2 uv;
    vec2 light;
    vec4 color;
    vec3 localPos;
    vec3 localOffset;
    vec3 localNormal;
    vec4 localTangent;

    #ifdef RENDER_ENTITY
        vec4 overlayColor;
    #endif

    #ifdef RENDER_TERRAIN
        flat uint blockId;
    #endif

    #if defined(RENDER_TERRAIN) && defined(RENDER_TRANSLUCENT)
        vec3 surfacePos;
        float waveStrength;
    #endif

    #if defined(RENDER_PARALLAX) && defined(RENDER_TERRAIN)
        vec3 tangentViewPos;
    #endif

    #if defined(RENDER_PARALLAX) || defined(MATERIAL_NORMAL_SMOOTH) || defined(MATERIAL_ENTITY_TESSELLATION)
        flat vec2 atlasCoordMin;
        flat vec2 atlasCoordSize;
    #endif
} vOut;

#include "/lib/utility/tessellation_eval.glsl"

#if defined(RENDER_TERRAIN) && defined(RENDER_TRANSLUCENT)
    #include "/lib/water_waves.glsl"
#endif

#ifdef RENDER_ENTITY
    #include "/lib/sampling/atlas.glsl"
    #include "/lib/utility/tbn.glsl"
#endif

#ifdef EFFECT_TAA_ENABLED
    #include "/lib/taa_jitter.glsl"
#endif


void main() {
    gl_Position = _interpolate(gl_in, gl_Position);

    vOut.uv = _interpolate(vIn, uv);
    vOut.light = _interpolate(vIn, light);
    vOut.color = _interpolate(vIn, color);
    vOut.localPos = _interpolate(vIn, localPos);
    vOut.localOffset = _interpolate(vIn, localOffset);
    vOut.localNormal = _interpolate(vIn, localNormal);
    vOut.localTangent = _interpolate(vIn, localTangent);

    #ifdef RENDER_ENTITY
        vOut.overlayColor = _interpolate(vIn, overlayColor);
    #endif

    #ifdef RENDER_TERRAIN
        vOut.blockId = vIn[0].blockId;
    #endif

    #if defined(RENDER_TERRAIN) && defined(RENDER_TRANSLUCENT)
        vOut.surfacePos = _interpolate(vIn, surfacePos);
        vOut.waveStrength = _interpolate(vIn, waveStrength);
    #endif

    #if defined(RENDER_PARALLAX) && defined(RENDER_TERRAIN)
        vOut.tangentViewPos = _interpolate(vIn, tangentViewPos);
    #endif

    #if defined(RENDER_PARALLAX) || defined(MATERIAL_NORMAL_SMOOTH) || defined(MATERIAL_ENTITY_TESSELLATION)
        vOut.atlasCoordMin = vIn[0].atlasCoordMin;
        vOut.atlasCoordSize = vIn[0].atlasCoordSize;
    #endif

    #if defined(RENDER_TERRAIN) && defined(RENDER_TRANSLUCENT)
        // bool isWater = bitfieldExtract(vIn[0].blockId, 6, 1) != 0;
        bool is_fluid = iris_hasFluid(vIn[0].blockId);

        if (is_fluid) {
            float distF = 1.0 - smoothstep(0.2, 2.8, length(vOut.surfacePos));
            distF = 1.0 - (distF*distF);

            vec3 waveOffset = GetWaveHeight(ap.camera.pos + vOut.localPos, vOut.light.y, ap.time.elapsed, WaterWaveOctaveMin);
            vOut.localPos.y += distF * waveOffset.y * vOut.waveStrength;

            vec3 viewPos = mul3(ap.camera.view, vOut.localPos);
            gl_Position = ap.camera.projection * vec4(viewPos, 1.0);

            #ifdef EFFECT_TAA_ENABLED
                jitter(gl_Position);
            #endif
        }
    #endif

    #ifdef RENDER_ENTITY
        float depth = iris_sampleNormalMap(vOut.uv).a;

        if (depth < 1.0) {
            vec2 localCoord = GetLocalCoord(vOut.uv, vOut.atlasCoordMin, vOut.atlasCoordSize);

            vec3 rounded_normal = vec3(localCoord, 1.0);
            rounded_normal = rounded_normal * 2.0 - 1.0;
            rounded_normal = normalize(rounded_normal);

            // todo: tbn
            vec3 localNormal = normalize(vOut.localNormal);
            vec3 localTangent = normalize(vOut.localTangent.xyz);
            mat3 matTBN = GetTBN(localNormal, localTangent, vOut.localTangent.w);
            rounded_normal = matTBN * rounded_normal;

            depth = depth * 2.0 - 1.0;
            vOut.localPos += 1.5 * rounded_normal * depth;

            vec3 viewPos = mul3(ap.camera.view, vOut.localPos);
            gl_Position = ap.camera.projection * vec4(viewPos, 1.0);

            #ifdef EFFECT_TAA_ENABLED
                jitter(gl_Position);
            #endif
        }
    #endif
}
