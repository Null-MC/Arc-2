#version 430 core

#include "/lib/constants.glsl"
#include "/settings.glsl"

layout (triangles, fractional_even_spacing, ccw) in;

#include "/lib/common.glsl"

in VertexData2 {
    vec2 uv;
    vec2 light;
    vec4 color;
    vec3 localPos;
    vec3 localOffset;
    vec3 localNormal;
    vec4 localTangent;
    flat uint blockId;

    vec3 surfacePos;
    float waveStrength;

    #if defined(RENDER_PARALLAX) || defined(MATERIAL_NORMAL_SMOOTH)
		vec3 tangentViewPos;
		flat vec2 atlasCoordMin;
		flat vec2 atlasCoordSize;
	#endif
} vIn[];

out VertexData2 {
    vec2 uv;
    vec2 light;
    vec4 color;
    vec3 localPos;
    vec3 localOffset;
    vec3 localNormal;
    vec4 localTangent;
    flat uint blockId;

    vec3 surfacePos;
    float waveStrength;

    #if defined(RENDER_PARALLAX) || defined(MATERIAL_NORMAL_SMOOTH)
		vec3 tangentViewPos;
        flat vec2 atlasCoordMin;
        flat vec2 atlasCoordSize;
	#endif
} vOut;

#include "/lib/water_waves.glsl"

#include "/lib/utility/tessellation_eval.glsl"

#ifdef EFFECT_TAA_ENABLED
    #include "/lib/taa_jitter.glsl"
#endif


void main() {
    gl_Position = _interpolate(gl_in, gl_Position);

    vOut.uv = _interpolate(vIn, uv);
    vOut.light = _interpolate(vIn, light);
    vOut.color = _interpolate(vIn, color);
    vOut.localPos = _interpolate(vIn, localPos);
    vOut.localOffset = _interpolate(vIn, localOffset);
    vOut.localNormal = _interpolate(vIn, localNormal);
    vOut.localTangent = _interpolate(vIn, localTangent);

    vOut.blockId = vIn[0].blockId;

    vOut.surfacePos = _interpolate(vIn, surfacePos);
    vOut.waveStrength = _interpolate(vIn, waveStrength);

    #if defined(RENDER_PARALLAX) || defined(MATERIAL_NORMAL_SMOOTH)
        vOut.tangentViewPos = _interpolate(vIn, tangentViewPos);

        vOut.atlasCoordMin = vIn[0].atlasCoordMin;
        vOut.atlasCoordSize = vIn[0].atlasCoordSize;
    #endif

    // bool isWater = bitfieldExtract(vIn[0].blockId, 6, 1) != 0;
    bool is_fluid = iris_hasFluid(vIn[0].blockId);

    if (is_fluid) {
        float distF = 1.0 - smoothstep(0.2, 2.8, length(vOut.surfacePos));
        distF = 1.0 - (distF*distF);
        
        vec3 waveOffset = GetWaveHeight(ap.camera.pos + vOut.localPos, vOut.light.y, ap.time.elapsed, WaterWaveOctaveMin);
        vOut.localPos.y += distF * waveOffset.y * vOut.waveStrength;

        vec3 viewPos = mul3(ap.camera.view, vOut.localPos);
        gl_Position = ap.camera.projection * vec4(viewPos, 1.0);

        #ifdef EFFECT_TAA_ENABLED
            jitter(gl_Position);
        #endif
    }
}
